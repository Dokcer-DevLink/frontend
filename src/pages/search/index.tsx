import React, { useEffect, useRef, useState } from 'react';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { FaArrowLeft } from 'react-icons/fa';

import { Button } from '@/components/Elements';
import { Header, MainLayout } from '@/components/Layout';
import {
  ButtonBox,
  Buttons,
  Inner,
} from '@/styles/pageStyles/search/index.style';
import {
  SearchForm,
  VerticalPosts,
  WritePost,
  getPosts,
} from '@/features/posts';
import { useSearchParams } from 'next/navigation';
import { VerticalUsers, getUsers } from '@/features/users';
import { PostType } from '@/features/posts/type';
import { UserType } from '@/features/users/type';

export default function Search() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const list = searchParams.get('list');
  const role = searchParams.get('role');

  const [isMentor, setIsMentor] = useState<boolean>(role !== 'mentee');
  const [isPosts, setIsPosts] = useState<boolean>(list !== 'users');
  const [keyword, setKeyword] = useState<string>('');

  const [posts, setPosts] = useState<PostType[]>([]);
  const [users, setUsers] = useState<UserType[]>([]);

  useEffect(() => {
    setIsLast(false);
    (async () => {
      const result = await getPosts({
        postType: isMentor ? 'MENTOR' : 'MENTEE',
        keyword,
        page: 0,
      });
      setPosts(result.data.content);
    })();
    (async () => {
      const result = await getUsers({
        profileType: isMentor ? 'MENTOR' : 'MENTEE',
        keyword,
        page: 0,
      });
      setUsers(result.data.content);
    })();
    setCount(0);
  }, [isMentor, keyword]);

  // Infinity Scroll

  const target = useRef(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [count, setCount] = useState(0);
  const [isLast, setIsLast] = useState<boolean>(false);

  useEffect(() => {
    console.log(isLoading);
    if (isLoading) {
      return;
    }
  }, [isLoading]);

  useEffect(() => {
    console.log(count);
    // setIsLoading(true);
  }, [count]);

  const getItems = async () => {
    try {
      if (isPosts) {
        const result = await getPosts({
          postType: isMentor ? 'MENTOR' : 'MENTEE',
          keyword,
          page: count,
        });
        if (result.data.last) {
          setIsLast(true);
        }
        if (count === 0) {
          setPosts(result.data.content);
        } else {
          setPosts((prev) => [...prev, ...result.data.content]);
        }
      } else {
        const result = await getUsers({
          profileType: isMentor ? 'MENTOR' : 'MENTEE',
          keyword,
          page: count,
        });
        if (result.data.last) {
          setIsLast(true);
        }
        if (count === 0) {
          setUsers(result.data.content);
        } else {
          setUsers((prev) => [...prev, ...result.data.content]);
        }
      }
      setIsLoading(false);
    } catch (error) {
      console.error(error);
    }
  };

  // eslint-disable-next-line react-hooks/exhaustive-deps
  const onIntersect = async (
    [entry]: any,
    observer: { observe: (arg0: any) => void }
  ) => {
    if (entry.isIntersecting) {
      if (isLoading || isLast) {
        return;
      }
      setIsLoading(true);
      (async () => {
        setTimeout(() => getItems(), 500);
      })();
      console.log('intersect');
      setCount((prev) => prev + 1);
    }
  };

  useEffect(() => {
    let observer: IntersectionObserver;
    if (target.current) {
      if (target) {
        observer = new IntersectionObserver(onIntersect, {
          threshold: 0.4,
        });
        observer.observe(target.current);
      }
    }
    return () => observer && observer.disconnect();
  }, [onIntersect, target]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <MainLayout>
        <Header
          title="검색하기"
          leftbuttons={
            <Button
              textstyle="title"
              size="large"
              variant="background"
              padding="2px"
              startIcon={<FaArrowLeft />}
              onclick={() => router.back()}
            />
          }
        />
        <Inner>
          <SearchForm setKeyword={setKeyword} />
          <ButtonBox>
            <Buttons>
              <Button
                borderradius="0"
                justifycontent="center"
                isoutlined={!isMentor}
                onclick={() => setIsMentor(true)}
              >
                멘토
              </Button>
              <Button
                borderradius="0"
                justifycontent="center"
                isoutlined={isMentor}
                onclick={() => setIsMentor(false)}
              >
                멘티
              </Button>
            </Buttons>
            <Buttons>
              <Button
                borderradius="0"
                justifycontent="center"
                isoutlined={!isPosts}
                onclick={() => setIsPosts(true)}
              >
                게시물 목록
              </Button>
              <Button
                borderradius="0"
                justifycontent="center"
                isoutlined={isPosts}
                onclick={() => setIsPosts(false)}
              >
                유저 목록
              </Button>
            </Buttons>
          </ButtonBox>
          {isPosts ? (
            <VerticalPosts posts={posts} observer={<div ref={target}></div>} />
          ) : (
            <VerticalUsers users={users} observer={<div ref={target}></div>} />
          )}
        </Inner>
      </MainLayout>
      <WritePost />
    </>
  );
}
